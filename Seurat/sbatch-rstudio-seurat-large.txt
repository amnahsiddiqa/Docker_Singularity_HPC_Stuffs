#!/bin/sh
​
# This script runs rstudio remotely on HPC.
# It will output instructions (in the file specified below by the
# slurm --output directive) for connecting to the remote instance on HPC
# running rstudio.
# The container specified by the SIF variable below is assumed
# to include rstudio.
​
# This was taken from:
# https://www.rocker-project.org/use/singularity/
# and was modified only in the Begin/End customization block,
# with a little additional JAX-specific clarification in the slurm output.
​
#SBATCH --time=2-08:00:00
#SBATCH --signal=USR2
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=2
#SBATCH -N 1
#SBATCH --mem=500GB
#SBATCH -q batch
#SBATCH -p compute
​
# Begin customization
​
# Set --output to the location of the slurm output file (location must be writable / readable by the user)
#SBATCH --output=sbatch-rstudio-seurat.job.%j
​
# Set SIF to the location of a Singularity container, which is assumed to contain rstudio
# This particular SIF containing Rstudio and Seurat is available at jaxreg here: https://jaxreg.jax.org/collections/3
export SIF=/projects/trowbridge-lab/USERS/whitebr/rstudio-seurat-4.0.3.sif
​
# End customization
​
# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary. Adjust path as appropriate for your computing environment.
workdir=$(python -c 'import tempfile; print(tempfile.mkdtemp())')
​
mkdir -p -m 700 ${workdir}/run ${workdir}/tmp ${workdir}/var/lib/rstudio-server
cat > ${workdir}/database.conf <<END
provider=sqlite
directory=/var/lib/rstudio-server
END
​
# Set OMP_NUM_THREADS to prevent OpenBLAS (and any other OpenMP-enhanced
# libraries used by R) from spawning more threads than the number of processors
# allocated to the job.
#
# Set R_LIBS_USER to a path specific to rocker/rstudio to avoid conflicts with
# personal libraries from any R installation in the host environment
​
cat > ${workdir}/rsession.sh <<END
#!/bin/sh
export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}
export R_LIBS_USER=${HOME}/R/rocker-rstudio/4.0
exec rsession "\${@}"
END
​
chmod +x ${workdir}/rsession.sh
​
export SINGULARITY_BIND="${workdir}/run:/run,${workdir}/tmp:/tmp,${workdir}/database.conf:/etc/rstudio/database.conf,${workdir}/rsession.sh:/etc/rstudio/rsession.sh,${workdir}/var/lib/rstudio-server:/var/lib/rstudio-server"
​
# Do not suspend idle sessions.
# Alternative to setting session-timeout-minutes=0 in /etc/rstudio/rsession.conf
# https://github.com/rstudio/rstudio/blob/v1.4.1106/src/cpp/server/ServerSessionManager.cpp#L126
export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0
​
export SINGULARITYENV_USER=$(id -un)
export SINGULARITYENV_PASSWORD=$(openssl rand -base64 15)
export IP=`hostname -i`
​
# get unused socket per https://unix.stackexchange.com/a/132524
# tiny race condition between the python & singularity commands
# NB: added comment about sumner below
readonly PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
cat 1>&2 <<END
1. SSH tunnel from your workstation using the following command:
​
   ssh -N -L 8787:${HOSTNAME}:${PORT} ${SINGULARITYENV_USER}@LOGIN-HOST
​
   and point your web browser to http://localhost:8787
​
   e.g., LOGIN-HOST = login.sumner.jax.org
​
2. log in to RStudio Server using the following credentials:
​
   user: ${SINGULARITYENV_USER}
   password: ${SINGULARITYENV_PASSWORD}
​
When done using RStudio Server, terminate the job by:
​
1. Exit the RStudio Session ("power" button in the top right corner of the RStudio window)
2. Issue the following command on the login node:
​
      scancel -f ${SLURM_JOB_ID}
END
​
module load singularity
singularity exec --cleanenv ${SIF} \
    rserver --www-port ${PORT} \
            --auth-none=0 \
            --auth-pam-helper-path=pam-helper \
            --auth-stay-signed-in-days=30 \
            --auth-timeout-minutes=0 \
            --rsession-path=/etc/rstudio/rsession.sh
printf 'rserver exited' 1>&2